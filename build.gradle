plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'java-library'
}


group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'org.mapstruct:mapstruct:1.5.1.Final'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.1'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'

    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.33.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    archiveName = 'pessoa.jar'
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true

        xml.destination file("${buildDir}/reports/jacoco.xml")
        html.destination file("${buildDir}/reports/coverage")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/PessoaMicroserviceApplication**",
                    "com/example/pessoamicroservice/client/**",
                    "com/example/pessoamicroservice/configs/**",
                    "com/example/pessoamicroservice/mapper/**",
                    "com/example/pessoamicroservice/models/**",
                    "com/example/pessoamicroservice/controller/dtos/**",
                    "com/example/pessoamicroservice/exceptions/handler/ExceptionFilters**",
            ])
        }))
    }
}

publishing {

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/warleyvods/pessoa-microservice"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GIT_LOGIN")
                password = project.findProperty("gpr.key") ?: System.getenv("GIT_TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}
